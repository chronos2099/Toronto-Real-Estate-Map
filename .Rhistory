# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
display_ui <- function(id) {
ns <- NS(id)
tagList(
fluidRow(
column(
width = 6,
plotOutput(ns("costPlot"))
),
column(
width = 6,
plotOutput(ns("formattable"))
)
)
)
}
# Define UI for application
ui<- fluidPage(
# Application title
titlePanel("Fixed rate mortgage calculator"),
# Sidebar for mortgage details
sidebarLayout(
sidebarPanel(
fluidRow(
h3("General"),
sliderInput("borrow",
"Borrowing ($)",
min = 1,
max = 5000000,
value = 100000),
sliderInput("period",
"Fixed period (years)",
min = 1,
max = 50,
value = 2),
hr(),
mortgage_panel("mortgage_1","Mortgage 1"),
mortgage_panel("mortgage_2","Mortgage 2"),
mortgage_panel("mortgage_3","Mortgage 3"),
mortgage_panel("mortgage_4","Mortgage 4")
)),
mainPanel( display_ui("plot")
)
)
)
# Define server logic required to draw a histogram
server<-function(input, output) {
borrowed<- reactive({
return(input$borrow)
})
period <- reactive({
return(input$period)
})
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combined_mort, "plot", borrowed, period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
borrowed<- reactive({
return(input$borrow)
})
period <- reactive({
return(input$period)
})
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed, period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<- tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(total_cost(borrowed,period,mort1$fee,mort1$interest_rate,mort1$repayment_pcm),
total_cost(borrowed,period,mort2$fee,mort2$interest_rate,mort2$repayment_pcm),
total_cost(borrowed,period,mort3$fee,mort3$interest_rate,mort3$repayment_pcm),
total_cost(borrowed,period,mort4$fee,mort4$interest_rate,mort4$repayment_pcm)))
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
# Define server logic required to draw a histogram
server<-function(input, output) {
borrowed<- reactive({
return(input$borrow)
})
period <- reactive({
return(input$period)
})
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed, period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
borrowed<- reactive({
return(input$borrow)
})
period <- reactive({
return(input$period)
})
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed(), period(), mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(total_cost(borrowed,period,mort1$fee,mort1$interest_rate,mort1$repayment_pcm),
total_cost(borrowed,period,mort2$fee,mort2$interest_rate,mort2$repayment_pcm),
total_cost(borrowed,period,mort3$fee,mort3$interest_rate,mort3$repayment_pcm),
total_cost(borrowed,period,mort4$fee,mort4$interest_rate,mort4$repayment_pcm)))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm()),
total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm()),
total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm()),
total_cost(borrowed,period,mort4$fee(),mort4$interest_rate(),mort4$repayment_pcm())))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
mortgage1<- total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm())
mortgage2<- total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm())
mortgage3<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
mortgage4<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(mortgage1,mortgage2,mortgage3,mortgage5))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
mortgage1<- total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm())
print(mortgage1)
mortgage2<- total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm())
mortgage3<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
mortgage4<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(mortgage1,mortgage2,mortgage3,mortgage5))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee())
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
?rlang::sym()
total_cost = function(borrow,  period, fees, interest_rate, repayment_pcm){
borrow <- rlang::sym(borrow)
period <- rlang::sym(period)
fees<- rlang::sym(fees)
interest_rate<- rlang::sym(interest_rate)
repayment_pcm<- rlang::sym(repayment_pcm)
df = tibble(year = 0:period,
borrowed = borrow + fees,
interest = (borrow + fees) * (interest_rate / 100))
for (i in 2:nrow(df)){
df$borrowed[i] = df$borrowed[i - 1] + df$interest[i - 1] - (repayment_pcm * 12)
df$interest[i] = df$borrowed[i] * (interest_rate / 100)
}
print(df)
sum(df$interest)
}
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
mortgage1<- total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm())
mortgage2<- total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm())
mortgage3<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
mortgage4<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(mortgage1,mortgage2,mortgage3,mortgage5))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", input$borrow, input$period, mort1,mort2,mort3,mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
print(input$mortgage_1)
}
shinyApp(ui = ui, server = server)
start<- reactive({
print(input$mortgage_1)
})
# Define server logic required to draw a histogram
server<-function(input, output) {
start<- reactive({
print(input$mortgage_1)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed = input$borrow, period = input$period, mort1 = mort1,mort2 =mort2,mort3 =mort3,mort4 =mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
combine_mort <-
combine_mort <-
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
print(borrowed)
tables<-reactive({
mortgage1<- total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm())
mortgage2<- total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm())
mortgage3<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
mortgage4<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(mortgage1,mortgage2,mortgage3,mortgage5))
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed = input$borrow, period = input$period, mort1 = mort1,mort2 =mort2,mort3 =mort3,mort4 =mort4)
}
shinyApp(ui = ui, server = server)
combine_mort <- function (input,output,session,borrowed,period,mort1,mort2,mort3,mort4){
tables<-reactive({
mortgage1<- total_cost(borrowed,period,mort1$fee(),mort1$interest_rate(),mort1$repayment_pcm())
mortgage2<- total_cost(borrowed,period,mort2$fee(),mort2$interest_rate(),mort2$repayment_pcm())
mortgage3<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
mortgage4<- total_cost(borrowed,period,mort3$fee(),mort3$interest_rate(),mort3$repayment_pcm())
table<-tibble(mort = c("Mortgage 1", "Mortgage 2", "Mortgage 3", "Mortgage 4"),
cost = c(mortgage1,mortgage2,mortgage3,mortgage5))
return(table)
})
output$costPlot <- renderPlot({
# draw the plot of mortgage costs
tables%>%
ggplot(aes(mort, cost)) +
geom_col() +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
labs(x = "",
y = "Cost") +
theme_bw() +
theme(text = element_text(size = 20))
})
output$formattable = renderFormattable({
tables %>%
mutate(Cost = currency(Cost, "$")) %>%
formattable(list(Cost = color_bar("pink")))
})
}
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
print(mort1$fee)
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed = input$borrow, period = input$period, mort1 = mort1,mort2 =mort2,mort3 =mort3,mort4 =mort4)
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server<-function(input, output) {
mort1<- callModule(mortgage_select, "mortgage_1")
test<-renderText({print(mort1)})
mort2<- callModule(mortgage_select, "mortgage_2")
mort3<- callModule(mortgage_select, "mortgage_3")
mort4<- callModule(mortgage_select, "mortgage_4")
table<- callModule(combine_mort, "plot", borrowed = input$borrow, period = input$period, mort1 = mort1,mort2 =mort2,mort3 =mort3,mort4 =mort4)
}
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "Toronto Real Estate Data"),
dashboardSidebar("Cog from Glyphicons:", icon("android", lib = "font-awesome"),menuItem("Widgets", icon = icon("th"), tabName = "widgets",
badgeLabel = "new", badgeColor = "green")),
dashboardBody()
)
server<- function(input,output,session){
}
shinyApp(ui = ui, server = server)
